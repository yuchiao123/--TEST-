{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yuchiao123/--TEST-/blob/TEST-3/python%20chat%20gpt%E5%AD%B8%E7%BF%92\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "_uPgOJhhkfPC",
        "outputId": "4710dccd-ced9-4276-ee15-40422285ec35"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unindent does not match any outer indentation level (<tokenize>, line 85)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m85\u001b[0m\n\u001b[0;31m    });\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ],
      "source": [
        "<html><head><base href=\"https://3d-surreal-room-explorer.com\">\n",
        "<meta charset=\"UTF-8\">\n",
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "<title>3D Surreal Room Explorer</title>\n",
        "<style>\n",
        "  body, html {\n",
        "    margin: 0;\n",
        "    padding: 0;\n",
        "    height: 100%;\n",
        "    overflow: hidden;\n",
        "    font-family: Arial, sans-serif;\n",
        "  }\n",
        "  #gameCanvas {\n",
        "    width: 100%;\n",
        "    height: 100%;\n",
        "    display: block;\n",
        "  }\n",
        "  #info {\n",
        "    position: absolute;\n",
        "    top: 10px;\n",
        "    left: 10px;\n",
        "    color: white;\n",
        "    font-size: 18px;\n",
        "    background-color: rgba(0,0,0,0.5);\n",
        "    padding: 10px;\n",
        "    border-radius: 5px;\n",
        "  }\n",
        "  #crosshair {\n",
        "    position: absolute;\n",
        "    top: 50%;\n",
        "    left: 50%;\n",
        "    width: 20px;\n",
        "    height: 20px;\n",
        "    transform: translate(-50%, -50%);\n",
        "    pointer-events: none;\n",
        "  }\n",
        "</style>\n",
        "</head>\n",
        "<body>\n",
        "  <canvas id=\"gameCanvas\"></canvas>\n",
        "  <div id=\"info\">\n",
        "    WASD: Move | Mouse: Look | E: Enter Portal | R: Restart\n",
        "  </div>\n",
        "  <svg id=\"crosshair\" viewBox=\"0 0 100 100\">\n",
        "    <circle cx=\"50\" cy=\"50\" r=\"48\" stroke=\"white\" stroke-width=\"2\" fill=\"none\" />\n",
        "    <line x1=\"50\" y1=\"0\" x2=\"50\" y2=\"100\" stroke=\"white\" stroke-width=\"2\" />\n",
        "    <line x1=\"0\" y1=\"50\" x2=\"100\" y2=\"50\" stroke=\"white\" stroke-width=\"2\" />\n",
        "  </svg>\n",
        "\n",
        "  <audio id=\"backgroundMusic\" loop>\n",
        "    <source src=\"https://example.com/calming-music.mp3\" type=\"audio/mpeg\">\n",
        "  </audio>\n",
        "\n",
        "  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n",
        "  <script>\n",
        "    const canvas = document.getElementById('gameCanvas');\n",
        "    const scene = new THREE.Scene();\n",
        "    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n",
        "    const renderer = new THREE.WebGLRenderer({ canvas });\n",
        "    renderer.setSize(window.innerWidth, window.innerHeight);\n",
        "\n",
        "    // Background music\n",
        "    const backgroundMusic = document.getElementById('backgroundMusic');\n",
        "    backgroundMusic.volume = 0.3;\n",
        "    canvas.addEventListener('click', () => {\n",
        "      backgroundMusic.play();\n",
        "    });\n",
        "\n",
        "    // Player\n",
        "    const playerHeight = 1.8;\n",
        "    const moveSpeed = 10;\n",
        "    let playerVelocity = new THREE.Vector3();\n",
        "\n",
        "    camera.position.set(0, playerHeight, 0);\n",
        "\n",
        "    // Room\n",
        "    const roomSize = 20;\n",
        "    const wallGeometry = new THREE.BoxGeometry(roomSize, roomSize, 0.1);\n",
        "    const ceilingFloorGeometry = new THREE.BoxGeometry(roomSize, 0.1, roomSize);\n",
        "\n",
        "    function createWall(position, rotation) {\n",
        "      const wallMaterial = new THREE.MeshPhongMaterial({\n",
        "        color: Math.random() * 0xffffff,\n",
        "        map: createWeirdTexture(),\n",
        "      });\n",
        "      const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);\n",
        "      wallMesh.position.copy(position);\n",
        "      wallMesh.rotation.setFromVector3(rotation);\n",
        "      scene.add(wallMesh);\n",
        "    }\n",
        "\n",
        "    function createRoom() {\n",
        "      createWall(new THREE.Vector3(0, roomSize / 2, -roomSize / 2), new THREE.Vector3(0, 0, 0));\n",
        "      createWall(new THREE.Vector3(0, roomSize / 2, roomSize / 2), new THREE.Vector3(0, Math.PI, 0));\n",
        "      createWall(new THREE.Vector3(-roomSize / 2, roomSize / 2, 0), new THREE.Vector3(0, Math.PI / 2, 0));\n",
        "      createWall(new THREE.Vector3(roomSize / 2, roomSize / 2, 0), new THREE.Vector3(0, -Math.PI / 2, 0));\n",
        "\n",
        "      const floorMaterial = new THREE.MeshPhongMaterial({\n",
        "        color: 0x808080,\n",
        "        map: createWeirdTexture(),\n",
        "      });\n",
        "      const floorMesh = new THREE.Mesh(ceilingFloorGeometry, floorMaterial);\n",
        "      floorMesh.position.set(0, 0, 0);\n",
        "      scene.add(floorMesh);\n",
        "\n",
        "      const ceilingMaterial = new THREE.MeshPhongMaterial({\n",
        "        color: 0x808080,\n",
        "        map: createWeirdTexture(),\n",
        "      });\n",
        "      const ceilingMesh = new THREE.Mesh(ceilingFloorGeometry, ceilingMaterial);\n",
        "      ceilingMesh.position.set(0, roomSize, 0);\n",
        "      scene.add(ceilingMesh);\n",
        "    }\n",
        "\n",
        "    // Lights\n",
        "    const ambientLight = new THREE.AmbientLight(0x404040);\n",
        "    scene.add(ambientLight);\n",
        "\n",
        "    const pointLight = new THREE.PointLight(0xffffff, 1, 100);\n",
        "    pointLight.position.set(0, roomSize / 2, 0);\n",
        "    scene.add(pointLight);\n",
        "\n",
        "    // Floating shapes\n",
        "    const shapeGeometries = [\n",
        "      new THREE.TetrahedronGeometry(1),\n",
        "      new THREE.OctahedronGeometry(1),\n",
        "      new THREE.DodecahedronGeometry(1),\n",
        "      new THREE.TorusKnotGeometry(0.5, 0.2, 100, 16),\n",
        "    ];\n",
        "\n",
        "    let floatingShapes = [];\n",
        "\n",
        "    function createFloatingShapes() {\n",
        "      floatingShapes = [];\n",
        "      for (let i = 0; i < 10; i++) {\n",
        "        const geometry = shapeGeometries[Math.floor(Math.random() * shapeGeometries.length)];\n",
        "        const material = new THREE.MeshPhongMaterial({ color: Math.random() * 0xffffff });\n",
        "        const shape = new THREE.Mesh(geometry, material);\n",
        "        shape.position.set(\n",
        "          Math.random() * roomSize - roomSize / 2,\n",
        "          Math.random() * roomSize,\n",
        "          Math.random() * roomSize - roomSize / 2\n",
        "        );\n",
        "        shape.userData.velocity = new THREE.Vector3(\n",
        "          (Math.random() - 0.5) * 0.05,\n",
        "          (Math.random() - 0.5) * 0.05,\n",
        "          (Math.random() - 0.5) * 0.05\n",
        "        );\n",
        "        scene.add(shape);\n",
        "        floatingShapes.push(shape);\n",
        "      }\n",
        "    }\n",
        "\n",
        "    // 3D Words\n",
        "    const fontLoader = new THREE.FontLoader();\n",
        "    const fonts = [\n",
        "      'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/helvetiker_bold.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/optimer_regular.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/optimer_bold.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/gentilis_regular.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/gentilis_bold.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/droid/droid_sans_regular.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/droid/droid_sans_bold.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/droid/droid_serif_regular.typeface.json',\n",
        "      'https://threejs.org/examples/fonts/droid/droid_serif_bold.typeface.json'\n",
        "    ];\n",
        "\n",
        "    // Function to get random words\n",
        "    async function getRandomWords(count) {\n",
        "      const response = await fetch(`https://random-word-api.herokuapp.com/word?number=${count}`);\n",
        "      return response.json();\n",
        "    }\n",
        "\n",
        "    async function create3DWords() {\n",
        "      const words = await getRandomWords(5);\n",
        "      words.forEach(word => {\n",
        "        const randomFont = fonts[Math.floor(Math.random() * fonts.length)];\n",
        "        fontLoader.load(randomFont, function(font) {\n",
        "          const textGeometry = new THREE.TextGeometry(word, {\n",
        "            font: font,\n",
        "            size: 1,\n",
        "            height: 0.2,\n",
        "          });\n",
        "          const textMaterial = new THREE.MeshPhongMaterial({ color: Math.random() * 0xffffff });\n",
        "          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n",
        "          textMesh.position.set(\n",
        "            Math.random() * roomSize - roomSize / 2,\n",
        "            Math.random() * roomSize,\n",
        "            Math.random() * roomSize - roomSize / 2\n",
        "          );\n",
        "          textMesh.rotation.set(\n",
        "            Math.random() * Math.PI,\n",
        "            Math.random() * Math.PI,\n",
        "            Math.random() * Math.PI\n",
        "          );\n",
        "          textMesh.scale.set(\n",
        "            1 + Math.random() * 0.5,\n",
        "            1 + Math.random() * 0.5,\n",
        "            1 + Math.random() * 0.5\n",
        "          );\n",
        "          textMesh.userData.rotationSpeed = new THREE.Vector3(\n",
        "            (Math.random() - 0.5) * 0.02,\n",
        "            (Math.random() - 0.5) * 0.02,\n",
        "            (Math.random() - 0.5) * 0.02\n",
        "          );\n",
        "          textMesh.userData.scaleSpeed = new THREE.Vector3(\n",
        "            (Math.random() - 0.5) * 0.005,\n",
        "            (Math.random() - 0.5) * 0.005,\n",
        "            (Math.random() - 0.5) * 0.005\n",
        "          );\n",
        "          scene.add(textMesh);\n",
        "        });\n",
        "      });\n",
        "    }\n",
        "\n",
        "    // Portal\n",
        "    let portalMesh;\n",
        "\n",
        "    function createWeirdPortal() {\n",
        "      if (portalMesh) {\n",
        "        scene.remove(portalMesh);\n",
        "      }\n",
        "\n",
        "      const randomGeometry = [\n",
        "        new THREE.TorusGeometry(2, 0.5, 16, 100),\n",
        "        new THREE.SphereGeometry(2, 32, 32),\n",
        "        new THREE.IcosahedronGeometry(2),\n",
        "        new THREE.TorusKnotGeometry(1.5, 0.5, 100, 16),\n",
        "      ][Math.floor(Math.random() * 4)];\n",
        "\n",
        "      const portalMaterial = new THREE.MeshPhongMaterial({\n",
        "        color: Math.random() * 0xffffff,\n",
        "        emissive: Math.random() * 0xffffff,\n",
        "        wireframe: Math.random() > 0.5,\n",
        "      });\n",
        "\n",
        "      portalMesh = new THREE.Mesh(randomGeometry, portalMaterial);\n",
        "      portalMesh.position.set(\n",
        "        Math.random() * (roomSize - 4) - (roomSize / 2 - 2),\n",
        "        3,\n",
        "        Math.random() * (roomSize - 4) - (roomSize / 2 - 2)\n",
        "      );\n",
        "      scene.add(portalMesh);\n",
        "    }\n",
        "\n",
        "    // Background\n",
        "    function createBackground() {\n",
        "      const loader = new THREE.TextureLoader();\n",
        "      const randomImage = `https://picsum.photos/id/${Math.floor(Math.random() * 1000)}/1024/1024`;\n",
        "      loader.load(randomImage, function(texture) {\n",
        "        scene.background = texture;\n",
        "      });\n",
        "    }\n",
        "\n",
        "    // Controls\n",
        "    const keys = { w: false, a: false, s: false, d: false };\n",
        "\n",
        "    document.addEventListener('keydown', (e) => {\n",
        "      if (e.key.toLowerCase() in keys) keys[e.key.toLowerCase()] = true;\n",
        "      if (e.key.toLowerCase() === 'r') restartGame();\n",
        "    });\n",
        "\n",
        "    document.addEventListener('keyup', (e) => {\n",
        "      if (e.key.toLowerCase() in keys) keys[e.key.toLowerCase()] = false;\n",
        "      if (e.key.toLowerCase() === 'e') checkPortalEntry();\n",
        "    });\n",
        "\n",
        "    let pitch = 0;\n",
        "    let yaw = 0;\n",
        "\n",
        "    document.addEventListener('mousemove', (e) => {\n",
        "      if (document.pointerLockElement === canvas) {\n",
        "        const sensitivity = 0.002;\n",
        "        yaw -= e.movementX * sensitivity;\n",
        "        pitch -= e.movementY * sensitivity;\n",
        "        pitch = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch));\n",
        "      }\n",
        "    });\n",
        "\n",
        "    canvas.addEventListener('click', () => {\n",
        "      canvas.requestPointerLock();\n",
        "    });\n",
        "\n",
        "    function createWeirdTexture() {\n",
        "      const canvas = document.createElement('canvas');\n",
        "      canvas.width = 256;\n",
        "      canvas.height = 256;\n",
        "      const ctx = canvas.getContext('2d');\n",
        "\n",
        "      ctx.fillStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\n",
        "      ctx.fillRect(0, 0, 256, 256);\n",
        "\n",
        "      for (let i = 0; i < 50; i++) {\n",
        "        ctx.beginPath();\n",
        "        ctx.fillStyle = `hsla(${Math.random() * 360}, 100%, 50%, 0.5)`;\n",
        "        ctx.arc(Math.random() * 256, Math.random() * 256, Math.random() * 50, 0, Math.PI * 2);\n",
        "        ctx.fill();\n",
        "      }\n",
        "\n",
        "      const texture = new THREE.CanvasTexture(canvas);\n",
        "      texture.wrapS = THREE.RepeatWrapping;\n",
        "      texture.wrapT = THREE.RepeatWrapping;\n",
        "      texture.repeat.set(4, 4);\n",
        "\n",
        "      return texture;\n",
        "    }\n",
        "\n",
        "    function checkPortalEntry() {\n",
        "      const distanceToPortal = camera.position.distanceTo(portalMesh.position);\n",
        "      if (distanceToPortal < 3) {\n",
        "        teleportPlayer();\n",
        "      }\n",
        "    }\n",
        "\n",
        "    function teleportPlayer() {\n",
        "      const newX = Math.random() * (roomSize - 4) - (roomSize / 2 - 2);\n",
        "      const newZ = Math.random() * (roomSize - 4) - (roomSize / 2 - 2);\n",
        "      camera.position.set(newX, playerHeight, newZ);\n",
        "      playerVelocity.set(0, 0, 0);\n",
        "\n",
        "      // Remove all existing shapes and text\n",
        "      scene.children = scene.children.filter(child =>\n",
        "        child instanceof THREE.Light ||\n",
        "        child instanceof THREE.Mesh && (child.geometry === wallGeometry || child.geometry === ceilingFloorGeometry)\n",
        "      );\n",
        "\n",
        "      // Create new shapes and text\n",
        "      createFloatingShapes();\n",
        "      create3DWords();\n",
        "      createBackground();\n",
        "      createWeirdPortal();\n",
        "    }\n",
        "\n",
        "    function generateNewRoom() {\n",
        "      // Remove existing room elements\n",
        "      scene.children = scene.children.filter(child => child instanceof THREE.Light);\n",
        "\n",
        "      // Regenerate room\n",
        "      createRoom();\n",
        "      createFloatingShapes();\n",
        "      create3DWords();\n",
        "      createBackground();\n",
        "      createWeirdPortal();\n",
        "\n",
        "      // Reposition player\n",
        "      camera.position.set(0, playerHeight, 0);\n",
        "      playerVelocity.set(0, 0, 0);\n",
        "    }\n",
        "\n",
        "    function restartGame() {\n",
        "      generateNewRoom();\n",
        "      pitch = 0;\n",
        "      yaw = 0;\n",
        "    }\n",
        "\n",
        "    function updatePlayer(deltaTime) {\n",
        "      const speedDelta = deltaTime * moveSpeed;\n",
        "\n",
        "      if (keys.w) {\n",
        "        playerVelocity.add(getForwardVector().multiplyScalar(speedDelta));\n",
        "      }\n",
        "      if (keys.s) {\n",
        "        playerVelocity.add(getForwardVector().multiplyScalar(-speedDelta));\n",
        "      }\n",
        "      if (keys.a) {\n",
        "        playerVelocity.add(getSideVector().multiplyScalar(-speedDelta));\n",
        "      }\n",
        "      if (keys.d) {\n",
        "        playerVelocity.add(getSideVector().multiplyScalar(speedDelta));\n",
        "      }\n",
        "\n",
        "      let damping = Math.exp(-4 * deltaTime) - 1;\n",
        "      playerVelocity.addScaledVector(playerVelocity, damping);\n",
        "\n",
        "      const deltaPosition = playerVelocity.clone().multiplyScalar(deltaTime);\n",
        "      camera.position.add(deltaPosition);\n",
        "\n",
        "      // Constrain the player to the room\n",
        "      camera.position.x = Math.max(-roomSize / 2 + 1, Math.min(roomSize / 2 - 1, camera.position.x));\n",
        "      camera.position.y = playerHeight;\n",
        "      camera.position.z = Math.max(-roomSize / 2 + 1, Math.min(roomSize / 2 - 1, camera.position.z));\n",
        "    }\n",
        "\n",
        "    function getForwardVector() {\n",
        "      camera.getWorldDirection(playerDirection);\n",
        "      playerDirection.y = 0;\n",
        "      playerDirection.normalize();\n",
        "      return playerDirection;\n",
        "    }\n",
        "\n",
        "    function getSideVector() {\n",
        "      camera.getWorldDirection(playerDirection);\n",
        "      playerDirection.y = 0;\n",
        "      playerDirection.normalize();\n",
        "      playerDirection.cross(camera.up);\n",
        "      return playerDirection;\n",
        "    }\n",
        "\n",
        "    const playerDirection = new THREE.Vector3();\n",
        "\n",
        "    function updateFloatingShapes(deltaTime) {\n",
        "      floatingShapes.forEach(shape => {\n",
        "        shape.position.add(shape.userData.velocity);\n",
        "\n",
        "        // Bounce off walls\n",
        "        if (Math.abs(shape.position.x) > roomSize / 2 - 1) {\n",
        "          shape.userData.velocity.x *= -1;\n",
        "        }\n",
        "        if (Math.abs(shape.position.y) > roomSize - 1) {\n",
        "          shape.userData.velocity.y *= -1;\n",
        "        }\n",
        "        if (Math.abs(shape.position.z) > roomSize / 2 - 1) {\n",
        "          shape.userData.velocity.z *= -1;\n",
        "        }\n",
        "\n",
        "        // Rotate the shape\n",
        "        shape.rotation.x += 0.01;\n",
        "        shape.rotation.y += 0.01;\n",
        "      });\n",
        "    }\n",
        "\n",
        "    function updateWeirdText(deltaTime) {\n",
        "      scene.children.forEach(child => {\n",
        "        if (child instanceof THREE.Mesh && child.geometry instanceof THREE.TextGeometry) {\n",
        "          child.rotation.x += child.userData.rotationSpeed.x;\n",
        "          child.rotation.y += child.userData.rotationSpeed.y;\n",
        "          child.rotation.z += child.userData.rotationSpeed.z;\n",
        "\n",
        "          child.scale.x += child.userData.scaleSpeed.x;\n",
        "          child.scale.y += child.userData.scaleSpeed.y;\n",
        "          child.scale.z += child.userData.scaleSpeed.z;\n",
        "\n",
        "          // Limit scaling\n",
        "          child.scale.x = THREE.MathUtils.clamp(child.scale.x, 0.5, 2);\n",
        "          child.scale.y = THREE.MathUtils.clamp(child.scale.y, 0.5, 2);\n",
        "          child.scale.z = THREE.MathUtils.clamp(child.scale.z, 0.5, 2);\n",
        "\n",
        "          // Reverse scale direction if limits are reached\n",
        "          if (child.scale.x <= 0.5 || child.scale.x >= 2) child.userData.scaleSpeed.x *= -1;\n",
        "          if (child.scale.y <= 0.5 || child.scale.y >= 2) child.userData.scaleSpeed.y *= -1;\n",
        "          if (child.scale.z <= 0.5 || child.scale.z >= 2) child.userData.scaleSpeed.z *= -1;\n",
        "        }\n",
        "      });\n",
        "    }\n",
        "\n",
        "    let prevTime = performance.now();\n",
        "\n",
        "    function animate() {\n",
        "      requestAnimationFrame(animate);\n",
        "\n",
        "      const time = performance.now();\n",
        "      const deltaTime = (time - prevTime) / 1000;\n",
        "      prevTime = time;\n",
        "\n",
        "      updatePlayer(deltaTime);\n",
        "      updateFloatingShapes(deltaTime);\n",
        "      updateWeirdText(deltaTime);\n",
        "\n",
        "      // Update camera rotation\n",
        "      camera.rotation.order = 'YXZ';\n",
        "      camera.rotation.x = pitch;\n",
        "      camera.rotation.y = yaw;\n",
        "\n",
        "      // Rotate portal\n",
        "      if (portalMesh) {\n",
        "        portalMesh.rotation.y += 0.01;\n",
        "      }\n",
        "\n",
        "      renderer.render(scene, camera);\n",
        "    }\n",
        "\n",
        "    // Initial room generation\n",
        "    createRoom();\n",
        "    createFloatingShapes();\n",
        "    create3DWords();\n",
        "    createBackground();\n",
        "    createWeirdPortal();\n",
        "\n",
        "    animate();\n",
        "\n",
        "    window.addEventListener('resize', () => {\n",
        "      camera.aspect = window.innerWidth / window.innerHeight;\n",
        "      camera.updateProjectionMatrix();\n",
        "      renderer.setSize(window.innerWidth, window.innerHeight);\n",
        "    });\n",
        "  </script>\n",
        "</body></html>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://websim.ai/c/9jxda5BnumV2a2l9s"
      ],
      "metadata": {
        "id": "yKIyOr7Pktl9"
      }
    }
  ]
}